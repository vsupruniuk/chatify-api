name: Docker image build and deploy

on:
  push:
    branches: ["release/*"]
  pull_request:
    branches: ["release/*"]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Extract branch name
        shell: bash
        id: extract_branch
        run: |
          branch=${GITHUB_REF#refs/heads/}
          clean_branch=${branch#release/}
          echo "clean_branch=$clean_branch" >> $GITHUB_OUTPUT

      - name: Wait for code delivery action finish
        uses: convictional/trigger-workflow-and-wait@v1.6.1
        with:
          owner: vsupruniuk
          repo: chatify-api
          github_token: ${{ secrets.GH_ACCESS_TOKEN_CI_CD }}
          workflow_file_name: node.js.yaml
          wait_interval: 30
          propagate_failure: true
          trigger_workflow: true
          wait_workflow: true
          ref: ${{ steps.extract_branch.outputs.branch }}

        env:
          REGISTRY: docker.io
          IMAGE_NAME: vsupruniuk/chatify-api:${{ steps.extract_branch.outputs.branch }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.7.0
        with:
          cosign-release: 'v3.0.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1

      - name: Log into Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

