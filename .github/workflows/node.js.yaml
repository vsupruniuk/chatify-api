name: Chatify API code delivery

on:
  push:
    branches: ["master", "release/*"]
  pull_request:
    branches: ["master", "release/*"]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - name: Extract branch name
      shell: bash
      id: extract_branch
      run: |
        if [[ "${GITHUB_REF}" == refs/pull/* ]]; then
          source_branch="${GITHUB_HEAD_REF}"
        else
          source_branch="${GITHUB_REF#refs/heads/}"
        fi
        echo "source_branch=$source_branch" >> $GITHUB_OUTPUT

    - name: Wait for dependency review finish
      uses: convictional/trigger-workflow-and-wait@v1.6.1
      with:
        owner: vsupruniuk
        repo: chatify-api
        github_token: ${{ secrets.GH_ACCESS_TOKEN_CI_CD }}
        workflow_file_name: dependency-review.yaml
        wait_interval: 30
        propagate_failure: true
        trigger_workflow: true
        wait_workflow: true
        ref: ${{ steps.extract_branch.outputs.source_branch }}

    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build app
      run: npm run build --if-present

    - name: Run linter
      run: npm run lint

    - name: Run tests
      env:
        PORT: ${{ secrets.PORT }}
        TESTS_PORT: ${{ secrets.TESTS_PORT }}
        CLIENT_URL: ${{ secrets.CLIENT_URL }}

        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
        DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
        DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}

        SMTP_HOST: ${{ secrets.SMTP_HOST }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SMTP_USER: ${{ secrets.SMTP_USER }}
        SMTP_PASS: ${{ secrets.SMTP_PASS }}

        THROTTLE_TIME_TO_LIVE: ${{ secrets.THROTTLE_TIME_TO_LIVE }}
        THROTTLE_REQUESTS_LIMIT: ${{ secrets.THROTTLE_REQUESTS_LIMIT }}

        PASSWORD_SALT_HASH_ROUNDS: ${{ secrets.PASSWORD_SALT_HASH_ROUNDS }}

        JWT_ACCESS_TOKEN_SECRET: ${{ secrets.JWT_ACCESS_TOKEN_SECRET }}
        JWT_ACCESS_TOKEN_EXPIRES_IN: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRES_IN }}
        JWT_REFRESH_TOKEN_SECRET: ${{ secrets.JWT_REFRESH_TOKEN_SECRET }}
        JWT_REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.JWT_REFRESH_TOKEN_EXPIRES_IN }}

        CACHE_TIME_APP_USER: ${{ secrets.CACHE_TIME_APP_USER }}

        CRYPTO_IV_LENGTH: ${{ secrets.CRYPTO_IV_LENGTH }}
        CRYPTO_SALT_LENGTH: ${{ secrets.CRYPTO_SALT_LENGTH }}
        CRYPTO_KEY_LENGTH: ${{ secrets.CRYPTO_KEY_LENGTH }}
        CRYPTO_PASSWORD: ${{ secrets.CRYPTO_PASSWORD }}
        CRYPTO_CIPHER_ALGORITHM: ${{ secrets.CRYPTO_CIPHER_ALGORITHM }}
        CRYPTO_ENCRYPTION_ENCODING: ${{ secrets.CRYPTO_ENCRYPTION_ENCODING }}
      run: npm run test
